<?php

namespace OC\PlatformBundle\Repository;

/**
 * AdvertRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AdvertRepository extends \Doctrine\ORM\EntityRepository {

    public function myFindAll() {
        return $this->createQueryBuilder('a')
                        ->getQuery()
                        ->getResult()
        ;
    }

    public function myFindOne($id) {
        $qb = $this->createQueryBuilder('a');
        $qb->Where("a.id = :id")
                ->setParameter("id", $id);

        return $qb->getQuery()
                        ->getSingleResult()
        ;
    }

    public function findByAuthorAndDate($author, $year) {
        $qb = $this->createQueryBuilder('a');

        $qb->where('a.author = :author')
                ->setParameter('author', $author)
                ->andWhere('a.date < :year')
                ->setParameter('year', $year)
                ->orderBy('a.date', 'DESC')
        ;

        return $qb
                        ->getQuery()
                        ->getResult()
        ;
    }

    //fonction qui ajoute une condition au query builder, a utiliser directement dans les fonctions du repository
    public function whereCurrentYear(QueryBuilder $qb) {
        $qb
                ->andWhere('a.date BETWEEN :start AND :end')
                ->setParameter('start', new \Datetime(date('Y') . '-01-01'))  // Date entre le 1er janvier de cette année
                ->setParameter('end', new \Datetime(date('Y') . '-12-31'))  // Et le 31 décembre de cette année
        ;
        //perso j'aurais plutôt fait un truc du genre
//    $qb->andWhere("YEAR(a.date)=:year")
//            ->setparameter("year", new \Datetime(date('Y')));
    }

    public function getAdvertWithApplications() {
        $qb = $this
                ->createQueryBuilder('a')
                ->leftJoin('a.applications', 'app', 'WITH', 'YEAR(app.date) > 2013')
                ->addSelect('app')
        ;

        return $qb
                        ->getQuery()
                        ->getResult()
        ;
    }

    public function getAdvertWithCategories(array $categoryNames) {
//        $qb=$this->createQueryBuilder('a')
//                ->leftJoin("a.categories", 'cat')
//                ->where("cat.name IN (:catName)")
//                ->setParameter("catName", $categoryNames);
//        return $qb->getQuery()->getResult();
        
        $qb = $this->createQueryBuilder('a');

        // On fait une jointure avec l'entité Category avec pour alias « c »
        $qb
                ->innerJoin('a.categories', 'c')
                ->addSelect('c')
        ;

        // Puis on filtre sur le nom des catégories à l'aide d'un IN
        $qb->where($qb->expr()->in('c.name', $categoryNames));
        // La syntaxe du IN et d'autres expressions se trouve dans la documentation Doctrine
        // Enfin, on retourne le résultat
        return $qb
                        ->getQuery()
                        ->getResult()
        ;
    }

}
